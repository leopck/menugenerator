package menugen;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.net.URL;

import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;

public class Emulator extends JPanel implements MouseListener {

	private static final long serialVersionUID = 1L;
	String text = "abcdefghijklmnopqrst\nABCDEFGHIJKLMNOPQRST";
	int rows = 2;
	int cols = 20;
	
	final char font[][] = {
			{0x00, 0x00, 0x00, 0x00, 0x00}, // space
			{0x00, 0x00, 0x6f, 0x00, 0x00}, // !
			{0x00, 0x00, 0x07, 0x00, 0x07}, // "
			{0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
			{0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
			{0x43, 0x33, 0x08, 0x66, 0x61}, // %
			{0x32, 0x4d, 0x59, 0x21, 0x72}, // &
			{0x00, 0x00, 0x03, 0x00, 0x00}, // '
			{0x00, 0x00, 0x3e, 0x41, 0x00}, // (
			{0x00, 0x41, 0x3e, 0x00, 0x00}, // )
			{0x0a, 0x0c, 0x07, 0x0c, 0x0a}, // *
			{0x08, 0x08, 0x3e, 0x08, 0x08}, // +
			{0x00, 0x00, 0xe0, 0x60, 0x00}, // ,
			{0x08, 0x08, 0x08, 0x08, 0x08}, // -
			{0x00, 0x00, 0x60, 0x60, 0x00}, // .
			{0x40, 0x30, 0x08, 0x06, 0x01}, // /
			{0x3e, 0x45, 0x49, 0x51, 0x3e}, // 0
			{0x00, 0x42, 0x7f, 0x40, 0x00}, // 1
			{0x62, 0x51, 0x49, 0x45, 0x42}, // 2
			{0x22, 0x41, 0x49, 0x49, 0x36}, // 3
			{0x08, 0x0c, 0x0a, 0x7f, 0x08}, // 4
			{0x2f, 0x49, 0x49, 0x49, 0x31}, // 5
			{0x3e, 0x49, 0x49, 0x49, 0x32}, // 6
			{0x01, 0x71, 0x09, 0x05, 0x03}, // 7
			{0x36, 0x49, 0x49, 0x49, 0x36}, // 8
			{0x26, 0x49, 0x49, 0x49, 0x3e}, // 9
			{0x00, 0x36, 0x36, 0x00, 0x00}, // :
			{0x00, 0x00, 0x36, 0x16, 0x00}, // ;
			{0x00, 0x08, 0x14, 0x22, 0x00}, // <
			{0x00, 0x14, 0x14, 0x14, 0x14}, // =
			{0x00, 0x22, 0x14, 0x08, 0x00}, // >
			{0x02, 0x01, 0x59, 0x05, 0x02}, // ?
			{0x3e, 0x41, 0x5d, 0x55, 0x5e}, // @
			{0x7e, 0x09, 0x09, 0x09, 0x7e}, // A
			{0x7f, 0x49, 0x49, 0x49, 0x36}, // B
			{0x3e, 0x41, 0x41, 0x41, 0x22}, // C
			{0x7f, 0x41, 0x41, 0x41, 0x3e}, // D
			{0x7f, 0x49, 0x49, 0x49, 0x41}, // E
			{0x7f, 0x09, 0x09, 0x09, 0x01}, // F
			{0x3e, 0x41, 0x49, 0x49, 0x3a}, // G
			{0x7f, 0x08, 0x08, 0x08, 0x7f}, // H
			{0x41, 0x41, 0x7f, 0x41, 0x41}, // I
			{0x20, 0x40, 0x40, 0x40, 0x3f}, // J
			{0x7f, 0x08, 0x14, 0x22, 0x41}, // K
			{0x7f, 0x40, 0x40, 0x40, 0x40}, // L
			{0x7f, 0x02, 0x0c, 0x02, 0x7f}, // M
			{0x7f, 0x04, 0x08, 0x10, 0x7f}, // N
			{0x3e, 0x41, 0x41, 0x41, 0x3e}, // O
			{0x7f, 0x09, 0x09, 0x09, 0x06}, // P
			{0x3e, 0x41, 0x51, 0x21, 0x5e}, // Q
			{0x7f, 0x09, 0x19, 0x29, 0x46}, // R
			{0x26, 0x49, 0x49, 0x49, 0x32}, // S
			{0x01, 0x01, 0x7f, 0x01, 0x01}, // T
			{0x3f, 0x40, 0x40, 0x40, 0x3f}, // U
			{0x07, 0x18, 0x60, 0x18, 0x07}, // V
			{0x1f, 0x60, 0x18, 0x60, 0x1f}, // W
			{0x63, 0x14, 0x08, 0x14, 0x63}, // X
			{0x07, 0x08, 0x70, 0x08, 0x07}, // Y
			{0x61, 0x51, 0x49, 0x45, 0x43}, // Z
			{0x00, 0x7f, 0x41, 0x41, 0x00}, // [
			{0x01, 0x06, 0x08, 0x30, 0x40}, //
			{0x00, 0x41, 0x41, 0x7f, 0x00}, // ]
			{0x04, 0x02, 0x01, 0x02, 0x04}, // ^
			{0x40, 0x40, 0x40, 0x40, 0x40}, // _
			{0x01, 0x03, 0x00, 0x00, 0x00}, // `
			{0x38, 0x44, 0x44, 0x24, 0x78}, // a
			{0x7f, 0x44, 0x44, 0x44, 0x38}, // b
			{0x38, 0x44, 0x44, 0x44, 0x28}, // c
			{0x38, 0x44, 0x44, 0x44, 0x7f}, // d
			{0x38, 0x54, 0x54, 0x54, 0x48}, // e
			{0x00, 0x08, 0x7e, 0x09, 0x02}, // f
			{0x18, 0xa4, 0xa4, 0xa4, 0x78}, // g
			{0x7f, 0x04, 0x04, 0x04, 0x78}, // h
			{0x00, 0x00, 0x7d, 0x40, 0x00}, // i
			{0x40, 0x80, 0x80, 0x7d, 0x00}, // j
			{0x00, 0x7f, 0x10, 0x28, 0x44}, // k
			{0x00, 0x00, 0x7f, 0x00, 0x00}, // l
			{0x78, 0x04, 0x18, 0x04, 0x78}, // m
			{0x7c, 0x08, 0x04, 0x04, 0x78}, // n
			{0x38, 0x44, 0x44, 0x44, 0x38}, // o
			{0xf8, 0x24, 0x24, 0x24, 0x18}, // p
			{0x18, 0x24, 0x24, 0x24, 0xf8}, // q
			{0x7c, 0x08, 0x04, 0x04, 0x04}, // r
			{0x48, 0x54, 0x54, 0x54, 0x24}, // s
			{0x04, 0x04, 0x7e, 0x44, 0x04}, // t
			{0x3c, 0x40, 0x40, 0x20, 0x7c}, // u
			{0x0c, 0x30, 0x40, 0x30, 0x0c}, // v
			{0x3c, 0x40, 0x30, 0x40, 0x3c}, // w
			{0x44, 0x28, 0x10, 0x28, 0x44}, // x
			{0x1c, 0xa0, 0xa0, 0xa0, 0x7c}, // y
			{0x44, 0x64, 0x54, 0x4c, 0x44}, // z
			{0x08, 0x08, 0x36, 0x41, 0x41}, // {
			{0x00, 0x00, 0x77, 0x00, 0x00}, // |
			{0x41, 0x41, 0x36, 0x08, 0x08}, // }
			{0x02, 0x01, 0x01, 0x02, 0x01}, // ~
			{0xaa, 0x55, 0xaa, 0x55, 0xaa} // checker
			}; 
	PopupMenu popup;
	
	public Emulator() {
		setPreferredSize(new Dimension(260,140));
		setMaximumSize(new Dimension(368,200));
		setBackground(Color.BLACK);
		setText(Menu.active.startBlock.header);
		
		addMouseListener(this);
		
		popup = new PopupMenu();
	}
	
	public void setText(String text) {
		this.text = text;
		repaint();
	}
	
	@Override
	protected void paintComponent(Graphics gr) {
		super.paintComponent(gr);
		
		Graphics2D g = (Graphics2D) gr.create();
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		Image img;
		
		URL imgURL = getClass().getResource("/img/lcd_2x20_348.jpg");
		img = Toolkit.getDefaultToolkit().getImage(imgURL);
		
		double ratio = (double)img.getWidth(null) / (double)img.getHeight(null);
		int img_width = this.getWidth()-8;
		double lcd_w = (int)(img_width*0.82);
		double lcd_h = (int)(img_width/ratio*0.5);
		
		g.setColor(Color.DARK_GRAY);
		g.fillRoundRect(3, 3, getWidth()-6, getHeight()-6, 15, 15);
		g.setColor(Color.WHITE);
		g.drawRoundRect(3, 3, getWidth()-6, getHeight()-6, 15, 15);
		
		g.setColor(Color.WHITE);
		Font f = g.getFont().deriveFont(Font.BOLD, 12);
		g.setFont(f);
		g.drawString("Emulator", 10, 20);

		g.drawImage(img,4,24, img_width, (int)(img_width/ratio),null);
		
		/*
		 * Draw dot matrix text
		 */
		g.translate(4+img_width*0.082, 24+img_width/ratio * 0.24);
		//g.drawRect(0, 0, (int)lcd_w, (int)lcd_h);
		g.scale(lcd_w / (cols*3*6), lcd_h / (rows*3*8));
		g.setColor(Color.BLACK);
		
		int col = 0;
		int row = 0;
		for (int i = 0; i < text.length(); i++) {
			if (text.toCharArray()[i] == '\n') {
				row++;
				col = 0;
			}
			else {
				for (int y = 0; y < 8; y++) {
					for (int x = 0; x < 5; x++) {
						if (((font[text.toCharArray()[i]-32][x] >> (y)) & 1) > 0 && col < cols)
							g.fillRect(x*3 + col*6*3, y*3 + row * 3*8, 2, 2);
					}
				}				
				col++;
			}
		}
		
		g.dispose();
	}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) {}

	@Override
	public void mouseExited(MouseEvent e) {}

	@Override
	public void mousePressed(MouseEvent e) {
		if (e.isPopupTrigger()) {
			popup.showMenu(this, e.getX(), e.getY());
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		if (e.isPopupTrigger()) {
			popup.showMenu(this, e.getX(), e.getY());
		}
	}
	
	/*
	 * Popup menu class
	 */
	class PopupMenu extends JPopupMenu implements ActionListener {

		private static final long serialVersionUID = 1L;
		
		JRadioButtonMenuItem item_2x16;
		JRadioButtonMenuItem item_2x20;
		JRadioButtonMenuItem item_4x20;
		
		public PopupMenu() {
			
			item_2x16 = new JRadioButtonMenuItem("LCD 2x16");
			item_2x16.setActionCommand("2x16");
			item_2x16.addActionListener(this);
			add(item_2x16);

			item_2x20 = new JRadioButtonMenuItem("LCD 2x20");
			item_2x20.setActionCommand("2x20");
			item_2x20.addActionListener(this);
			item_2x20.setSelected(true);
			add(item_2x20);

			item_4x20 = new JRadioButtonMenuItem("LCD 4x20");
			item_4x20.setActionCommand("4x20");
			item_4x20.addActionListener(this);
			add(item_4x20);

			ButtonGroup group = new ButtonGroup();
			group.add(item_2x16);
			group.add(item_2x20);
			group.add(item_4x20);
		}
		
		public void showMenu(Component invoker, int x, int y) {
			this.show(invoker, x, y);
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			if (e.getActionCommand().equals("2x16")) {
				rows = 2;
				cols = 16;
				Emulator.this.repaint();
			}
			else if (e.getActionCommand().equals("2x20")) {
				rows = 2;
				cols = 20;
				Emulator.this.repaint();
			}
			else if (e.getActionCommand().equals("4x20")) {
				rows = 4;
				cols = 20;
				Emulator.this.repaint();
			}
		}
	}

}
